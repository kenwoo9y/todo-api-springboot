plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	flywayVersion = '9.16.3'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	implementation "org.flywaydb:flyway-mysql:${flywayVersion}"
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	
	// テスト実行時の詳細を表示
	testLogging {
		events "passed", "skipped", "failed"
		
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { desc, result ->
			if (!desc.parent) {
				println "\nTest result: ${result.resultType}"
				println "Test summary: ${result.testCount} tests, " +
					   "${result.successfulTestCount} succeeded, " +
					   "${result.failedTestCount} failed, " +
					   "${result.skippedTestCount} skipped"
				println "Total time: ${(result.endTime - result.startTime) / 1000.0} seconds"
			}
		}
	}

	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

	failFast = true
}

bootJar {
	enabled = true
	archiveClassifier = ''
	mainClass = 'com.example.todo.TodoApiApplication'
}

jar {
	enabled = false
}

// JaCoCoの設定
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/TodoApiApplication.class',
				'**/config/**',
				'**/model/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			
			excludes = [
				'com.example.todo.TodoApiApplication',
				'com.example.todo.config.*',
				'com.example.todo.model.*'
			]
		}
	}
}

test {
	finalizedBy jacocoTestReport
	finalizedBy jacocoTestCoverageVerification
}
